Automatically generated by Mendeley Desktop 1.19.5
Any changes to this file will be lost if it is regenerated by Mendeley.

BibTeX export options can be customized via Options -> BibTeX in Mendeley Desktop

@article{Sandberg1985,
author = {Sandberg, Russel and Goldberg, David and Kleiman, Steve and Walsh, Dan and Lyon, Bob},
file = {:home/griessbaum/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Sandberg et al. - 1985 - Design and Implementation or the Sun Network Filesystem.pdf:pdf},
isbn = {0-89006-337-0},
keywords = {opera,operating system},
title = {{Design and Implementation or the Sun Network Filesystem}},
year = {1985}
}
@incollection{Dijkstra2001,
abstract = {System A multiprogramming system is described in which all ac-tivities are divided over a number of sequential processes. These sequential processes are placed at various hierarchical levels, in each of which one or more independent abstractions have been implemented. The hierarchical structure proved to be vital for the verification of the logical soundness of the design and the correctness of its implementation.},
address = {New York, NY},
annote = {Coherence and proofability of correctness.

Engineering paper, not math, not science.

Target: Build a multiprogramming system. Multiprogramming --{\textgreater} Timeshare

Principles in the approach:
- Feature fix
- Learn from experience
- Loosely couple software and hardware (fix the hardware early in the project)

Why do we want multiprogramming system
- Short response time 
- Economics (multiplexing) of peripherals
- Separate information from its location (allowing to abstract hardware; having software live in a logical world)

What are the architecture paradigms?
- Processes living together in a harmoniously society, where
- A process is a sequential list of instructions

What are the abstractions? (abstractions meaning that something is hidden behind)
- LVL 0: Time (processes have no notion of the actual time) and number of processors are abstracted (hidden). However, there are synchronizations.
- LVL 1: Virtual memory (i.e. segments).
- LVL 2: Message interpreter. 
- LVL 3: Peripherals 
- LVL 4: User programs
- LVL 5: Operator

How to proof correctness?
Proof that the design is correct, then verify that the implementation behaves the same way by pushing the machine to all the "relevant" states.

How is synchronization implemented? (Appendix)
- Semaphores.

What are the two synchronizations:
- Mutual exclusion
- Private exclusion},
author = {Dijkstra, Edsger W},
booktitle = {Classic Operating Systems},
doi = {10.1007/978-1-4757-3510-9_12},
file = {:home/griessbaum/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Dijkstra - 2001 - The Structure of the “THE” Multiprogramming System.pdf:pdf},
keywords = {430,432,AND PHRASES,cooperating sequential processes,input-output bufferingt mulfiprogramming,mulfiprocessing' CR CATEGORIES,multlprogrammlng system,opera,operating system,processor sharing,program verification,real-tlme debugging,synchronizing primitives,system hierarchy,system levels,system structure},
number = {5},
pages = {223--236},
publisher = {Springer New York},
title = {{The Structure of the “THE” Multiprogramming System}},
url = {http://link.springer.com/10.1007/978-1-4757-3510-9{\_}12},
volume = {11},
year = {2001}
}
@article{Bobrow1972,
abstract = {TENEX is a new time sharing system implemented on a DEC PDP-10 augmented by special paging hardware developed at BBN. This report specifies a set of goals which are important for any time sharing system. It describes how the TENEX design and implementation achieve these goals. These include specifications for a powerful multiprocess large memory virtual machine, intimate terminal interaction, comprehensive uniform file and I/O capabilities, and clean flexible system structure. Although the implementation described here required some compromise to achieve a system operational within six months of hardware checkout, TENEX has met its major goals and provided reliable service at several sites and through the ARPA network.},
annote = {goals:


- communication between processes
- human engineering (user friendly)
- full virtual machine 
- virtual memory

word = 36 bits

syscall
- switch from unprivileged processor mode to privilege mode.},
author = {Bobrow, Daniel G and Burchfiel, Jerry D and Murphy, Daniel L and Tomlinson, Raymond S},
doi = {10.1145/361268.361271},
file = {:home/griessbaum/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Bobrow et al. - 1972 - TENEX, a paged time sharing system for the PDP - 10.pdf:pdf},
issn = {00010782},
journal = {Communications of the ACM},
keywords = {244,432,439,442,PDP-10 CR Categories,TENEX,and Phrases,opera,operating system,paging,process structure,scheduling algorithm,time sharing system,virtual machines},
month = {mar},
number = {3},
pages = {135--143},
title = {{TENEX, a paged time sharing system for the PDP - 10}},
url = {http://portal.acm.org/citation.cfm?doid=361268.361271},
volume = {15},
year = {1972}
}
@article{Hansen1970,
abstract = {This paper describes the philosophy and structure of a multiprogramming system that can be extended with a hierarchy of operating systems to suit diverse requirements of program scheduling and resource allocation. The system nucleus simulates an environment in which program execution and input/output are handled uniformly as parallel, cooperating processes. A fundamental set of primitives allows the dynamic creation and control of a hierarchy of processes as well as the communication among them.},
author = {Hansen, Per Brinch},
doi = {10.1145/362258.362278},
file = {:home/griessbaum/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Hansen - 1970 - The nucleus of a multiprogramming system.pdf:pdf},
issn = {00010782},
journal = {Communications of the ACM},
keywords = {opera,operating system},
month = {apr},
number = {4},
pages = {238--241},
title = {{The nucleus of a multiprogramming system}},
url = {http://portal.acm.org/citation.cfm?doid=362258.362278},
volume = {13},
year = {1970}
}
@article{Meyer1988,
abstract = {IIX is a multi-processing and multi-user timesharing operating system. It has become quite popular since its inception in 1969, running on machines of varying processing power from microprocessors to mainframes across different manufacturers' product lines. UNIX provides a great range of programs and services that have made the UNIX system environment popular among users. This environment contains the command interpreter shell, text processing packages, the source code control, a powerful mailing system and many more. The importance of UNIX for manufacturers lies in its philosophy of simplicity and consistency. Since UNIX is written almost totally in a high-level programming language it is very easy to port the system to all kinds of different machines. As a result, by the beginning of 984, there were already about 100 000 UNIX or UNIX-like system installations around the whole world, and the number is still increasing. ?? 1988.},
author = {Meyer, Veronika and Meyer, Walter},
doi = {10.1016/0010-4655(88)90115-4},
file = {:home/griessbaum/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Meyer, Meyer - 1988 - The UNIX{\textregistered} timesharing operating system.pdf:pdf},
isbn = {0001-0782},
issn = {00104655},
journal = {Computer Physics Communications},
keywords = {opera,operating system},
month = {jul},
number = {1-2},
pages = {51--57},
title = {{The UNIX{\textregistered} timesharing operating system}},
url = {http://linkinghub.elsevier.com/retrieve/pii/0010465588901154},
volume = {50},
year = {1988}
}
@article{Silberschatz2005,
abstract = {Another defining moment in the evolution of operating systems Small footprint operating systems, such as those driving the handheld devices that the baby dinosaurs are using on the cover, are just one of the cutting-edge applications you'll find in Silberschatz, Galvin, and Gagne's Operating System Concepts, Seventh Edition. By staying current, remaining relevant, and adapting to emerging course needs, this market-leading text has continued to define the operating systems course. This Seventh Edition not only presents the latest and most relevant systems, it also digs deeper to uncover those fundamental concepts that have remained constant throughout the evolution of today's operation systems. With this strong conceptual foundation in place, students can more easily understand the details related to specific systems. New Adaptations Increased coverage of user perspective in Chapter 1. Increased coverage of OS design throughout. A new chapter on real-time and embedded systems (Chapter 19). A new chapter on multimedia (Chapter 20). Additional coverage of security and protection. Additional coverage of distributed programming. New exercises at the end of each chapter. New programming exercises and projects at the end of each chapter. New student-focused pedagogy and a new two-color design to enhance the learning process.},
archivePrefix = {arXiv},
arxivId = {arXiv:1011.1669v3},
author = {Silberschatz, Abraham and Galvin, Peter Baer and Gagne, Greg},
doi = {10.1016/0950-5849(90)90158-N},
eprint = {arXiv:1011.1669v3},
file = {:home/griessbaum/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Silberschatz, Galvin, Gagne - 2005 - Operating Systeme Concepts.pdf:pdf},
isbn = {0471694665},
issn = {09505849},
journal = {Wiley},
keywords = {operating system},
pages = {575},
pmid = {25246403},
title = {{Operating Systeme Concepts}},
url = {http://www.inf.unideb.hu/{~}fazekasg/oktatas/Silberschatz/tm01-05.pdf},
volume = {32},
year = {2005}
}
@article{Rosenblum1992,
abstract = {This paper presents a new technique for disk storage management called a log-structured jile system. A log-structured file system writes all modifications to disk sequentially in a log-like structure, thereby speeding up both file writing and crash recovery. The log is the only structure on disk, it contains indexing information so that files can be read back from the log efficiently. In order to maintain large free areas on disk for fast writing, we divide the log into segments and use a segment cleaner to compress the live information from heavily fragmented segments. We present a series of simulations that demon-strate the efficiency of a simple cleaning policy based on cost and benefit. We have implemented a prototype log-structured file system called Sprite LFS; it outperforms current Unix file systems by an order of magnitude for small-file writes while matching or exceeding Unix perfor-mance for reads and large writes. Even when the overhead for cleaning is included, Sprite LFS can use 70{\%} of the disk bandwidth for writing, whems Unix file systems typi-cally can use only 5-10{\%}.},
author = {Rosenblum, Mendel and Ousterhout, John K},
doi = {10.1145/146941.146943},
file = {:home/griessbaum/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Rosenblum, Ousterhout - 1992 - The design and implementation of a log-structured file system.pdf:pdf},
issn = {07342071},
journal = {ACM Transactions on Computer Systems},
keywords = {opera,operating system},
month = {feb},
number = {1},
pages = {26--52},
title = {{The design and implementation of a log-structured file system}},
url = {http://portal.acm.org/citation.cfm?doid=146941.146943},
volume = {10},
year = {1992}
}
@article{McKusick1984,
abstract = {A reimplementation of the UNIX file system is described. The reimplementation provides substantially higher throughput rates by using more flexible allocation policies that allow better locality of reference and can be adapted to a wide range of peripheral and processor characteristics. The new file system clusters data that is sequentially accessed and provides two block sizes to allow fast access to large files while not wasting large amounts of space for small files. File access rates of up to ten times faster than the traditional UNIX file system are experienced. Long needed enhancements to the pro-grammers' interface are discussed. These include a mechanism to place advisory locks on files, extensions of the name space across file systems, the ability to use long file names, and provisions for administrative control of resource usage.},
author = {McKusick, Marshall K. and Joy, William N and Leffler, Samuel J and Fabry, Robert S},
doi = {10.1145/989.990},
file = {:home/griessbaum/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/McKusick et al. - 1984 - A fast file system for UNIX.pdf:pdf},
issn = {07342071},
journal = {ACM Transactions on Computer Systems},
keywords = {CR Categories and Subject Descriptors,D42 [Operating Systems],D43 [Operating Systems],D48 [Operating Systems],File Systems Management − file organization,H32 [Information Systems],Performance − measurements,UNIX,access methods,application program interface General Terms,directory structures,file system,file system design,file system organization,file system performance,measurement,opera,operating system,operational analysis,performance,secondary storage devices},
month = {aug},
number = {3},
pages = {181--197},
title = {{A fast file system for UNIX}},
url = {http://portal.acm.org/citation.cfm?doid=989.990},
volume = {2},
year = {1984}
}
